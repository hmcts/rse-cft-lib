import uk.gov.hmcts.rse.AuthMode
import uk.gov.hmcts.rse.ManifestTask


plugins {
    id 'org.springframework.boot' version '2.4.12'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'java'
    id 'com.github.hmcts.rse-cft-lib'
    id 'uk.gov.hmcts.java' version '0.12.41'
}

group = 'uk.gov.hmcts'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

repositories {
    mavenLocal()
}

dependencies {

    compileOnly 'org.projectlombok:lombok:1.18.26'
    annotationProcessor 'org.projectlombok:lombok:1.18.26'

    // Enable live reload of just our application
    cftlibImplementation 'org.springframework.boot:spring-boot-devtools'

    cftlibCompileOnly 'org.projectlombok:lombok:1.18.26'
    cftlibAnnotationProcessor 'org.projectlombok:lombok:1.18.26'

    cftlibTestCompileOnly 'org.projectlombok:lombok:1.18.26'
    cftlibTestAnnotationProcessor 'org.projectlombok:lombok:1.18.26'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.github.hmcts:service-auth-provider-java-client:4.0.3'
    implementation group: 'com.google.guava', name: 'guava', version: '31.1-jre'
    cftlibTestImplementation group: 'org.postgresql', name: 'postgresql', version: '42.5.4'

    cftlibTestImplementation 'org.springframework.boot:spring-boot-starter-test'
    cftlibTestImplementation 'org.springframework.security:spring-security-test'

    cftlibTestImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '3.0.2'
    cftlibTestImplementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.14'
    cftlibTestImplementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
    cftlibTestImplementation 'com.auth0:java-jwt:4.3.0'
    cftlibTestImplementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'
    cftlibTestImplementation 'org.awaitility:awaitility:4.2.0'
}

bootWithCCD {
    authMode = AuthMode.Local
    environment("RSE_LIB_STUB_AUTH_OUTBOUND", "true");
    // Force container recreation.
    environment('RSE_LIB_CLEAN_BOOT', 'true')
}

cftlibTest {
    environment("RSE_LIB_ADDITIONAL_DATABASES", "mydb")
    // Check that we are able to override the default port.
    environment 'RSE_LIB_S2S_PORT', '7431'
    environment 'RSE_LIB_DB_PORT', '8432'

    // Test environment variable substitution - this value should be subbed into one of our FixedLists
    environment 'CCD_DEF_CHANGED_NAME_HOW', '"ID": "ChangedNameHow"'
}

test {
    useJUnitPlatform()
}

tasks.each {
    if (it.name.contains("writeManifest")) {
        it.dependsOn(rootProject.tasks.publish)
    }
}
tasks.test.dependsOn(bootWithCCD)
bootWithCCD.dependsOn(rootProject.tasks.publish)
bootWithCCD.mustRunAfter cftlibTest

tasks.test.dependsOn(cftlibTest)
cftlibTest.dependsOn(rootProject.tasks.publish)
cftlibTestClasses.dependsOn(rootProject.tasks.publish)

// Relies on bootWithCCD starting up the dockerised dependencies.
task testGigaJar(type: uk.gov.hmcts.rse.CftlibExec, dependsOn: [cftlibExecutableJar, bootWithCCD]) {
    workingDir project.layout.buildDirectory.dir('gigatest')
    outputs.dir workingDir
    authMode = AuthMode.Local
    main = "-jar"
    environment 'CFT_LIB_NO_DOCKER', true
    args cftlibExecutableJar.archiveFile.get()
}

tasks.test.dependsOn(testGigaJar)

task publishSecrets(type: Exec) {
    commandLine 'az', 'keyvault', 'secret', 'set', "--vault-name", "rse-cft-lib", "--name", "aat-env", "--file", layout.buildDirectory.file('cftlib/.aat-env').get().asFile.path
}

// Ensure we publish all required dependencies to maven local
tasks.compileCftlibJava.dependsOn rootProject.publish
tasks.withType(ManifestTask).each {
    it.dependsOn rootProject.publish
}
configurations.each {
    it.resolutionStrategy.useGlobalDependencySubstitutionRules = false
}
