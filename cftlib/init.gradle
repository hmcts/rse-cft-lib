def configurePublishing(p) {
    p.configure(p, {
        apply plugin: 'java'
        apply plugin: 'maven-publish'
        p.afterEvaluate { project ->

        project.group 'com.github.hmcts.rse-cft-lib'
        // Override except for the Gradle plugin which sets a version during publish
        if (name != 'rse-cft-lib-plugin') {
            version = 'DEV-SNAPSHOT'
        }

        // Configure publishing
        if (components.hasProperty('java')) {
            configure(project) {
                java {
                    withSourcesJar()
                }
            }
        }

        //Configure sourcesJar for ccd-data-store for dependency fix
        if (project.name == 'ccd-data-store-api'){
            tasks.named('sourcesJar'){
                dependsOn(tasks.named('generateJsonSchema2Pojo'))
            }
        }

        // Disable gradle module metadata resolution and rely on maven pom
        tasks.withType(GenerateModuleMetadata) {
            enabled = false
        }
        publishing {
            publications {
                mavenJava(MavenPublication) {
                    from components.java
                    // Remap these service entry point project to fit our naming convention
                    if (project.name == "case-definition-store-api")     {
                       artifactId 'ccd-definition-store-api'
                    } else if (project.name == "user-profile-api")     {
                        artifactId 'ccd-user-profile-api'
                    } else if (project.name == "rpa-dg-docassembly") {
                        artifactId 'dg-docassembly-api'
                    }


                    // We need to be able to reproduce the exact runtime classpath of each project.
                    // To do this we replace the pom dependencies with the complete runtime classpath.
                    // ie. making every dependency direct, including transitive dependencies.
                    // We can also then disable transitive dependencies with an exclusion, since they
                    // will now be direct dependencies.
                    pom.withXml {
                        asNode().dependencies.replaceNode {}
                        asNode().dependencyManagement.each { it.parent().remove(it) }

                        def dependenciesNode = asNode().appendNode('dependencies')

                        // Only the root project contains the dependency set.
                        // For multimodule subprojects (eg. definition store) we do not publish dependencies.
                        if (project == rootProject) {
                            configurations.runtimeClasspath.resolvedConfiguration.resolvedArtifacts.each {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', it.moduleVersion.id.group)
                                dependencyNode.appendNode('artifactId', it.moduleVersion.id.name)
                                dependencyNode.appendNode('version', it.moduleVersion.id.version)

                                def exclusion = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                                exclusion.appendNode('groupId', '*')
                                exclusion.appendNode('artifactId', '*')
                            }
                        }
                    }
                }
            }
        }

        // We are consuming spring boot projects as libraries.
        // By default spring boot switches off jar generation
        // so we need to turn it back on in each cft project.
        if (project.hasProperty('jar')) {
            configure(project) {
                jar {
                    enabled = true
                }
            }
        }

        // Spring configures jar artifacts to have a "-plain" suffix
        // which we need to remove for POM publishing to work.
        // https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/#packaging-executable.and-plain-archives
        tasks.named("jar") {
            archiveClassifier = ''
        }
    }
    })
}

allprojects {
    configurePublishing(it)
    afterEvaluate { project ->
        java {
            toolchain {
                // Cftlib currently runs on Java 17 so we build all services using Java 17
                // TODO: move Cftlib to Java 21 when one or more bundled services require it.
                languageVersion = JavaLanguageVersion.of(17)
            }
        }
    }
}
