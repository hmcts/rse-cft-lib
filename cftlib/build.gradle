apply plugin: 'idea'
apply plugin: 'base'

tasks.register('publishToMavenLocal')
tasks.register('publishToAzureArtifacts')

// Create Gradle tasks that build and publish the CFT submodule projects to maven local.
// We invoke each subproject's build separately using its own Gradle wrapper since each
// project may require a different Gradle version.
project.file('../projects').listFiles().each { dir ->
    def t = task "publish${dir.name}"(type: Exec) {
        // Enable Gradle's up-to-date checks so we only rebuild the git submodules if they change.
        // Up to date checks require inputs and outputs to be defined, so we use the submodule's git tag as input
        // and the maven local folder of the project as output.
        inputs.property('sha', ['git', 'submodule', 'status', dir].execute().text)
        outputs.dir "${project.repositories.mavenLocal().url}/com/github/hmcts/rse-cft-lib/${dir.name}"
        executable './gradlew'
        args '--no-daemon','-i', '-s', '-I', project.file('buildSrc/configurePublishing.gradle').path, 'publishToMavenLocal'
        workingDir dir
    }
    publishToMavenLocal.dependsOn t

    def p = task "publish${dir.name}ToAzureArtifacts"(type: Exec) {
        executable './gradlew'
        args '--no-daemon','-i', '-s', '-I', project.file('buildSrc/configurePublishing.gradle').path, 'publishAllPublicationsToAzureArtifactsRepository'
        workingDir dir
    }
    publishToAzureArtifacts.dependsOn p
}

publishToMavenLocal.dependsOn gradle.includedBuild('rse-cft-lib-plugin').task(':publishToMavenLocal')
publishToAzureArtifacts.dependsOn gradle.includedBuild('rse-cft-lib-plugin').task(':publishAllPublicationsToAzureArtifactsRepository')

tasks.check.dependsOn gradle.includedBuild('rse-cft-lib-plugin').task(':check')

project(':ccd-data-store-api') {
  apply from: rootProject.file('buildSrc/configurePublishing.gradle')
}
publishToAzureArtifacts.dependsOn (':ccd-data-store-api:publishAllPublicationsToAzureArtifactsRepository')

project(':pcs-api').afterEvaluate {
    it.tasks.matching {
        it.name.startsWith("writeManifest")
    }.each {
        it.dependsOn rootProject.tasks.publishToMavenLocal
    }
}