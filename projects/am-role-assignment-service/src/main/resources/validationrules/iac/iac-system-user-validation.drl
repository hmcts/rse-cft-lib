package validationrules.iac;
import uk.gov.hmcts.reform.roleassignment.domain.model.RoleAssignment;
import uk.gov.hmcts.reform.roleassignment.domain.model.Request;
import uk.gov.hmcts.reform.roleassignment.domain.model.enums.Classification
import uk.gov.hmcts.reform.roleassignment.domain.model.enums.Status;
import uk.gov.hmcts.reform.roleassignment.domain.model.enums.RequestType;
import uk.gov.hmcts.reform.roleassignment.domain.model.enums.RoleCategory;
import uk.gov.hmcts.reform.roleassignment.domain.model.enums.RoleType;
import function uk.gov.hmcts.reform.roleassignment.domain.service.common.ValidationModelService.logMsg;

/*
 * IAC system user validation rules.
 */

rule "iac_system_user_hearings_roles_create"
when
    $rq: Request(
             clientId == "iac",
             process == "iac-system-users",
             reference == "iac-hearings-system-user",
             replaceExisting == true)
    $ra: RoleAssignment(
             status == Status.CREATE_REQUESTED,
             roleType == RoleType.ORGANISATION,
             classification == Classification.PUBLIC,
             roleName in ("hearing-manager","hearing-viewer"),
             roleCategory == RoleCategory.SYSTEM,
             grantType == GrantType.STANDARD,
             attributes["jurisdiction"] != null && attributes["jurisdiction"].asText() == "IA")
then
    $ra.setStatus(Status.CREATE_APPROVED);
    $ra.log("Create approved : iac_system_user_hearings_roles_create");
    update($ra);
    logMsg("Rule : iac_system_user_hearings_roles_create");
end;

rule "iac_system_user_hearings_roles_delete"
when
    $rq: Request(clientId == "iac")
    $ra: RoleAssignment(
             status == Status.DELETE_REQUESTED,
             roleType == RoleType.ORGANISATION,
             roleCategory in (RoleCategory.SYSTEM),
             roleName in ("hearing-manager","hearing-viewer"),
             //  this allows delete of both invalid IAC and valid IA jurisdictions see AM-3005/AM-3033
             attributes["jurisdiction"] != null && attributes["jurisdiction"].asText() in ("IAC", "IA"))
then
    $ra.setStatus(Status.DELETE_APPROVED);
    $ra.log("Delete approved : iac_system_user_hearings_roles_delete");
    update($ra);
    logMsg("Rule :: iac_system_user_hearings_roles_delete");
end;

rule "iac_system_user_case_allocator_role_create"
when
    $rq: Request(
             clientId == "iac",
             process == "iac-system-users",
             reference == "iac-case-allocator-system-user",
             replaceExisting == true)
    $ra: RoleAssignment(
             status == Status.CREATE_REQUESTED,
             roleType == RoleType.ORGANISATION,
             roleName in ("case-allocator"),
             roleCategory == RoleCategory.SYSTEM,
             grantType == GrantType.STANDARD,
             attributes["jurisdiction"] != null && attributes["jurisdiction"].asText() == "IA")
then
    $ra.setStatus(Status.CREATE_APPROVED);
    $ra.log("Create approved : iac_system_user_case_allocator_role_create");
    update($ra);
    logMsg("Rule : iac_system_user_case_allocator_role_create");
end;

rule "iac_system_user_case_allocator_role_delete"
when
    $rq: Request(clientId == "iac")
    $ra: RoleAssignment(
             status == Status.DELETE_REQUESTED,
             roleType == RoleType.ORGANISATION,
             roleCategory in (RoleCategory.SYSTEM),
             roleName in ("case-allocator"),
             attributes["jurisdiction"] != null && attributes["jurisdiction"].asText() == "IA")
then
    $ra.setStatus(Status.DELETE_APPROVED);
    $ra.log("Delete approved : iac_system_user_case_allocator_role_delete");
    update($ra);
    logMsg("Rule :: iac_system_user_case_allocator_role_delete");
end;
