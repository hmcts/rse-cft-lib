package validationrules.civil.common;
import uk.gov.hmcts.reform.roleassignment.domain.model.Assignment;
import uk.gov.hmcts.reform.roleassignment.domain.model.RoleAssignment;
import uk.gov.hmcts.reform.roleassignment.domain.model.Request;
import uk.gov.hmcts.reform.roleassignment.domain.model.enums.Classification
import uk.gov.hmcts.reform.roleassignment.domain.model.enums.Status;
import uk.gov.hmcts.reform.roleassignment.domain.model.enums.RequestType;
import uk.gov.hmcts.reform.roleassignment.domain.model.enums.GrantType;
import uk.gov.hmcts.reform.roleassignment.domain.model.enums.RoleCategory;
import uk.gov.hmcts.reform.roleassignment.domain.model.enums.RoleType
import uk.gov.hmcts.reform.roleassignment.domain.model.ExistingRoleAssignment;
import uk.gov.hmcts.reform.roleassignment.domain.model.Case;
import function uk.gov.hmcts.reform.roleassignment.domain.service.common.ValidationModelService.logMsg;
import uk.gov.hmcts.reform.roleassignment.util.ValidationUtil;
import uk.gov.hmcts.reform.roleassignment.domain.model.FeatureFlag;
import uk.gov.hmcts.reform.roleassignment.domain.model.enums.FeatureFlagEnum;
import java.time.ZonedDateTime;
import java.time.ZoneOffset
import java.time.temporal.ChronoUnit;

/*
 * All services: "specific-access-<roleCategory?>" case creation and leadership-judge as a assigner
 */

rule "civil_create_specific_access_case_role"
when
    $f : FeatureFlag(status && flagName == FeatureFlagEnum.IAC_SPECIFIC_1_0.getValue())
    $rq: Request(
             // The assigner must be the current user.
             assignerId == authenticatedUserId,
             process == "specific-access",
             reference != null)
    $ra: RoleAssignment(
             // Users cannot approve their own requests.
             actorId != $rq.assignerId,
             status == Status.CREATE_REQUESTED,
             roleType == RoleType.CASE,
             // Any of the specific-access-xxx roles, but with the right role category.
             // TBC if the syntax below works - if not we will need 4 rules.
             (roleName == "specific-access-admin" && roleCategory == RoleCategory.ADMIN) ||
             (roleName == "specific-access-judiciary" && roleCategory == RoleCategory.JUDICIAL) ||
             (roleName == "specific-access-legal-ops" && roleCategory == RoleCategory.LEGAL_OPERATIONS) ||
             (roleName == "specific-access-ctsc" && roleCategory == RoleCategory.CTSC),
             grantType == GrantType.SPECIFIC,
             notes != null && notes.size > 0 && notes.toString().length() > 5, /* Make sure there is at least one note with content in it */
             attributes["caseId"] != null && $caseId : attributes["caseId"].asText(),
             // Only applies to CIVIL.
             attributes["jurisdiction"] == null || attributes["jurisdiction"].asText() == "CIVIL")
    $c:  Case(
             id == $caseId,
             jurisdiction == "CIVIL")
    $e: ExistingRoleAssignment(
             // The assigner must have an organisational role ...
             actorId == $rq.assignerId,
             roleType == RoleType.ORGANISATION,
             // ... which is one of the service approver roles ...
             // ... and it is approving a request from the right kind of user ...
            (roleName in ("nbc-team-leader", "hearing-centre-team-leader", "ctsc-team-leader") && $ra.roleName == "specific-access-admin") ||
            (roleName == "leadership-judge" && $ra.roleName == "specific-access-judiciary") ||
            (roleName == "senior-tribunal-caseworker" && $ra.roleName == "specific-access-legal-ops")||
            (roleName == "ctsc-team-leader" && $ra.roleName == "specific-access-ctsc"),
             // ... and the role category should match the category of the role being created ...
             roleCategory == $ra.roleCategory,
             // ... with the usual constraints ...
             grantType == GrantType.STANDARD,
             classification.isAtLeast($c.securityClassification),
             endTime == null || endTime.isAfter(ZonedDateTime.now()),
             beginTime == null || !beginTime.isAfter(ZonedDateTime.now()),
             // ... within the service ...
             attributes["jurisdiction"] != null && attributes["jurisdiction"].asText() == "CIVIL",
             // ... restricted by case type, region, location and managed roles / categories, if specified ...
             attributes["caseType"] == null || attributes["caseType"].asText() == $c.caseTypeId,
             attributes["region"] == null || attributes["region"].asText() == $c.getRegion(),
             attributes["baseLocation"] == null || attributes["baseLocation"].asText() == $c.getBaseLocation(),
             attributes["managedRoleCategory"] == null || ValidationUtil.csvContains($ra.roleCategory.toString(), attributes["managedRoleCategory"].asText()),
             attributes["managedRole"] == null || ValidationUtil.csvContains($ra.roleName, attributes["managedRole"].asText()))
then
    // We copy the authorisations to allow the case config to require an authorisation
    // for (particularly judicial) role mappings
    $ra.setAuthorisations($e.getAuthorisations());
    $ra.setAttribute("jurisdiction", "CIVIL");
    $ra.setAttribute("caseType", $c.getCaseTypeId());
    $ra.setStatus(Status.CREATE_APPROVED);
    $ra.log("Stage 1 approved : civil_create_specific_access_case_role");
    update($ra);
    logMsg("Rule : civil_create_specific_access_case_role");
end;
